/**
 * Display the outputs from the line sensors on the
 * <a href="https://www.pololu.com/docs/0J86">Pololu 3pi+ 2040 robot</a>. This program spends the
 * first 10 seconds in calibration mode, during which you should move the robot over the light and
 * dark areas that you would like it to detect. It then switches into measurement mode and displays
 * the measured reflectance of the five IR sensors.
 *
 * @author Abhi Gundrala
 * @author Edward A. Lee
 */
target C {
  platform: {
    name: "rp2040",
    board: "pololu_3pi_2040_robot"
  },
  single-threaded: true
}

import Line from "lib/Line.lf"
import Display from "lib/Display.lf"
import Motors from "lib/Motors.lf"

reactor Robot {
  motors = new Motors()
  input dir: int
  input drive: bool
  logical action wait

  state cliffDir: int = 0
  state SPEED: float = 0.1

  initial mode STOPPED {
    reaction(drive) -> reset(DRIVING), motors.left_power, motors.right_power {=
      if (drive->value) {
        lf_set_mode(DRIVING);
        lf_set(motors.left_power, self->SPEED);
        lf_set(motors.right_power, self->SPEED);
      }
    =}
  }

  mode DRIVING {
    reaction(dir) -> reset(BACKING), motors.left_power, motors.right_power, wait {=
      if (dir->value != 0) {
        lf_set_mode(BACKING);
        lf_set(motors.left_power, -self->SPEED);
        lf_set(motors.right_power, -self->SPEED);
        lf_schedule(wait, SEC(1));
        self->cliffDir = dir->value;
      }
    =}
  }

  mode TURNING {
    reaction(wait) -> reset(DRIVING), motors.left_power, motors.right_power {=
      lf_set_mode(DRIVING);
            lf_set(motors.left_power, self->SPEED);
            lf_set(motors.right_power, self->SPEED);
    =}
  }

  mode BACKING {
    reaction(wait) -> reset(TURNING), wait, motors.left_power, motors.right_power {=
      lf_set_mode(TURNING);
      lf_schedule(wait, SEC(0.2));

      if (self->cliffDir == 1){
        lf_set(motors.left_power, self->SPEED);
        lf_set(motors.right_power, -self->SPEED);
      }else if (self->cliffDir == 2){
        // do nothing
      }else if (self->cliffDir == 3){
        lf_set(motors.left_power, -self->SPEED);
        lf_set(motors.right_power, self->SPEED);
      }
    =}
  }
}

main reactor(calibration_time: time = 10 s, sample_period: time = 100 ms) {
  line = new Line()
  disp = new Display()
  robot = new Robot()

  timer t(0, sample_period)
  timer seconds(0, 1 s)  // Timer used to display seconds.
  timer end_calibration(calibration_time)
  state count: int = 0
  state dir: int = 0

  reaction(startup) -> disp.line0, disp.line1, disp.line2 {=
    lf_set(disp.line0, "CALIBRATING");
    lf_set(disp.line1, "Roll robot over");
    lf_set(disp.line2, "light and dark.");
  =}

  reaction(seconds) -> disp.line3 {=
    static char buf[17];
    snprintf(buf, 17, "time:%8d s", self->count++);
    lf_set(disp.line3, buf);
  =}

  reaction(end_calibration) -> line.calibrate, robot.drive {=
    lf_set(line.calibrate, false);
    lf_set(robot.drive, true);
  =}

  reaction(t) -> line.trigger {=
    lf_set(line.trigger, true);
  =}

  reaction(line.reflect) -> disp.line0, disp.line1, disp.line2, robot.dir {=
    static char buf0[17];
    static char buf1[17];
    static char buf2[17];
    const int threshold = 800;

    lf_set(disp.line0, "");
    lf_set(disp.line1, "");
    lf_set(disp.line2, "");

    if (line.reflect->value[0] >= threshold || line.reflect->value[1] >= threshold) {
      lf_set(disp.line0, "Left detected!");
      lf_set(robot.dir, 1);
    }else if (line.reflect->value[3] >= threshold || line.reflect->value[4] >= threshold) {
      lf_set(disp.line1, "Right detected!");
      lf_set(robot.dir, 3);
    }else if (line.reflect->value[1] >= threshold || line.reflect->value[2] >= threshold || line.reflect->value[3] >= threshold) {
      lf_set(disp.line2, "Center detected!");
      lf_set(robot.dir, 2);
    }else{
      lf_set(robot.dir, 0);
    }
  =}
}
