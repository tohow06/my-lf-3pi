/**
 * Display the outputs from the line sensors on the
 * <a href="https://www.pololu.com/docs/0J86">Pololu 3pi+ 2040 robot</a>. This program spends the
 * first 10 seconds in calibration mode, during which you should move the robot over the light and
 * dark areas that you would like it to detect. It then switches into measurement mode and displays
 * the measured reflectance of the five IR sensors.
 *
 * @author Abhi Gundrala
 * @author Edward A. Lee
 */
target C {
  platform: {
    name: "rp2040",
    board: "pololu_3pi_2040_robot"
  },
  single-threaded: true
}

import Line from "lib/Line.lf"
import Display from "lib/Display.lf"
import MotorsWithFeedback from "lib/MotorsWithFeedback.lf"
import Encoders from "lib/Encoders.lf"

reactor Robot {
  input dir: int
  input drive: bool
  output left_speed: float
  output right_speed: float

  state SPEED: float = 0.1  // meters per second
  state TURN_R: float = 2

  initial mode INIT {
    reaction(drive) -> reset(DRIVING), left_speed, right_speed {=
      if (drive->value) {
        lf_set_mode(DRIVING);
      }
    =}
  }

  mode DRIVING {
    reaction(dir) -> reset(TURNING), reset(STOP), left_speed, right_speed {=
      switch (dir->value){
        case -1:
          lf_set_mode(STOP);
          break;
        case 0:
          lf_set_mode(TURNING);
          break;
        case 1:
          lf_set_mode(TURNING);
          break;
        case 2:
          lf_set(left_speed, self->SPEED);
          lf_set(right_speed, self->SPEED);
          break;
        case 3:
          lf_set_mode(TURNING);
          break;
        case 4:
          lf_set_mode(TURNING);
          break;
        default:
          break;
      }
    =}
  }

  mode TURNING {
    reaction(dir) -> reset(DRIVING), reset(STOP), left_speed, right_speed {=
      switch (dir->value){
        case -1:
          lf_set_mode(STOP);
          break;
        case 0:
          lf_set(left_speed, -self->SPEED);
          lf_set(right_speed, self->SPEED);
          break;
        case 1:
          lf_set(left_speed, self->SPEED);
          lf_set(right_speed, self->SPEED*self->TURN_R);
          break;
        case 2:
          lf_set_mode(DRIVING);
          break;
        case 3:
          lf_set(left_speed, self->SPEED*self->TURN_R);
          lf_set(right_speed, self->SPEED);
          break;
        case 4:
          lf_set(left_speed, self->SPEED);
          lf_set(right_speed, -self->SPEED);
          break;
        default:
          break;
      }
    =}
  }

  mode STOP {
    reaction(dir) -> left_speed, right_speed {=
      lf_set(left_speed, 0);
      lf_set(right_speed, 0);
    =}
  }
}

main reactor(calibration_time: time = 10 s, sample_period: time = 50 ms) {
  line = new Line()
  disp = new Display()
  robot = new Robot()
  motors = new MotorsWithFeedback()
  encoders = new Encoders()

  timer t(0, sample_period)
  timer seconds(0, 1 s)  // Timer used to display seconds.
  timer end_calibration(calibration_time)
  state count: int = 0
  state dir: int = 0
  state endCali: bool = false

  robot.left_speed -> motors.left_speed
  robot.right_speed -> motors.right_speed
  encoders.left -> motors.left
  encoders.right -> motors.right

  reaction(startup) -> disp.line0, disp.line1, disp.line2 {=
    lf_set(disp.line0, "CALIBRATING");
    lf_set(disp.line1, "Roll robot over");
    lf_set(disp.line2, "light and dark.");
  =}

  reaction(seconds) -> disp.line3 {=
    static char buf[17];
    snprintf(buf, 17, "time:%8d s", self->count++);
    lf_set(disp.line3, buf);
  =}

  reaction(end_calibration) -> line.calibrate, robot.drive {=
    lf_set(line.calibrate, false);
    lf_set(robot.drive, true);
    self->endCali = true;
  =}

  reaction(t) -> line.trigger, encoders.trigger {=
    lf_set(line.trigger, true);
    lf_set(encoders.trigger, true);
  =}

  reaction(line.reflect) -> disp.line0, disp.line1, disp.line2, robot.dir {=
    static char buf0[17];
    static char buf1[17];
    static char buf2[17];
    static int elseCounter = 0;
    const int threshold = 200;

    // lf_set(disp.line0, "");
    lf_set(disp.line1, "");
    lf_set(disp.line2, "");

    if (line.reflect->value[2] >= threshold) {
      lf_set(disp.line0, "Forward");
      lf_set(robot.dir, 2);
      elseCounter = 0; // Reset the counter
    } else if (line.reflect->value[1] >= threshold) {
      lf_set(disp.line0, "Left");
      lf_set(robot.dir, 1);
      elseCounter = 0; // Reset the counter
    } else if (line.reflect->value[0] >= threshold) {
      lf_set(disp.line0, "Sharp Left");
      lf_set(robot.dir, 0);
      elseCounter = 0; // Reset the counter
    } else if (line.reflect->value[3] >= threshold) {
      lf_set(disp.line0, "Right");
      lf_set(robot.dir, 3);
      elseCounter = 0; // Reset the counter
    } else if (line.reflect->value[4] >= threshold) {
      lf_set(disp.line0, "Sharp Right");
      lf_set(robot.dir, 4);
      elseCounter = 0; // Reset the counter
    } else {
      elseCounter++; // Increment the counter
      if (elseCounter > 5) {
        sprintf(buf0, "END detected!", elseCounter);
        lf_set(disp.line0, buf0);
        lf_set(robot.dir, -1);
      }
    }
  =}
}
