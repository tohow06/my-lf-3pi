target C {
  platform: {
    name: "rp2040",
    board: "pololu_3pi_2040_robot"
  },
  single-threaded: true,
  keepalive: true
}

main reactor InterruptDebouncedSolution {
  preamble {=
    #include <stdio.h>
    #include <pico/stdlib.h>
    #include <hardware/gpio.h>
    #include <stdint.h>
    #include <inttypes.h>

    #define BUTTON_PIN 25
    #define DEBOUNCE_THRESHOLD 200000000 // 200ms (以微秒為單位)

    static void* action;


    // 中斷回呼函數：偵測按鈕按下事件，並進行防抖處理
    static void gpio_callback(uint gpio, uint32_t events) {
        if (events & GPIO_IRQ_EDGE_FALL) {
            lf_schedule(action, 0); // 排程事件
        }
    }
  =}

  physical action a

  state first_press: bool
  state last_press_time: instant_t

  reaction(startup) -> a {=
    action = a;

    // 初始化 GPIO
    gpio_init(BUTTON_PIN);
    gpio_set_dir(BUTTON_PIN, GPIO_IN);
    gpio_pull_up(BUTTON_PIN);
    gpio_set_irq_enabled_with_callback(BUTTON_PIN, GPIO_IRQ_EDGE_FALL, true, &gpio_callback);

    printf("System initialized. Press the button to trigger events.\n");
  =}

  reaction(a) {=
    instant_t current_time = lf_time_physical(); // 取得目前物理時間
    instant_t elapsed_us = current_time - self->last_press_time; // 計算時間差 (微秒)

    if (self->first_press) {
        elapsed_us = 0;
        self->first_press = false;
    }
    //  else {
    //     elapsed_ms = (current_time - last_press_time) / 1000000;
    // }
    // 若間隔超過 200 毫秒才排程事件
    if (elapsed_us > DEBOUNCE_THRESHOLD) {
        printf("Button pressed! elapsed_us time:  %" PRId64 " ms \n",  elapsed_us/1000000);
        self->last_press_time = current_time;
    }
  =}
}
