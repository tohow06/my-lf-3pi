target C {
    platform: {
        name: "rp2040",
        board: "pololu_3pi_2040_robot"
    },
    single-threaded: true,
    keepalive: true
}

main reactor InterruptActionSolution {
    preamble {=
        #include <stdio.h>
        #include <pico/stdlib.h>
        #include <hardware/gpio.h>
        #include <stdint.h>
        #include <inttypes.h>

        #define BUTTON_PIN 25

        static void* action;
        static instant_t last_press_time = 0;
        static bool first_press = true;

        static void gpio_callback(uint gpio, uint32_t events) {
            if (events & GPIO_IRQ_EDGE_FALL) {
                lf_schedule(action, 0);
            }
        }
    =}

    physical action a;

    reaction(startup) -> a {=
        action = a;

        gpio_init(BUTTON_PIN);
        gpio_set_dir(BUTTON_PIN, GPIO_IN);
        gpio_pull_up(BUTTON_PIN);
        gpio_set_irq_enabled_with_callback(BUTTON_PIN, GPIO_IRQ_EDGE_FALL, true, &gpio_callback);

        printf("System initialized. Press the button to trigger events.\n");
    =}

    reaction(a) {=
        instant_t current_time = lf_time_logical();
        long elapsed_ms;

        if (first_press) {
            elapsed_ms = 0;
            first_press = false;
        } else {
            elapsed_ms = (current_time - last_press_time) / 1000000;
        }

        printf("Button pressed! Elapsed time since last press: %ld ms\n", elapsed_ms);
        last_press_time = current_time;
    =}
}
